# before use:
#   mkfs.vfat /dev/sda1
#   mount /dev/sda1 /mnt/tmp 
#   tar xzfp alpine-rpi-3.x.y-armhf.tar.gz -C /mnt/tmp
#   cp hostname.apkovl.tar.gz /mnt/tmp
#   umount /dev/sda1
---
- name: camera setup for alpine host(s)
  hosts: camera
  gather_facts: no
  serial: 1

  tasks:
    - name: disable SSH password authentication
      block:
        - name: set PasswordAuthentication to 'no'
          ansible.builtin.raw: sed -i -e 's/^#PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config

        - name: restarting OpenSSH
          ansible.builtin.raw: rc-service sshd restart


    - name: disable crond
      block:
        - name: stop crond
          ansible.builtin.raw: service crond stop

        - name: stop crond on boot
          ansible.builtin.raw: rc-update del crond | cat


    - name: CPU governor
      block:
        - name: create cpufreq script
          ansible.builtin.raw: echo -e '#!/bin/sh\n\n# Set the governor to ondemand for all processors\nfor cpu in /sys/devices/system/cpu/cpufreq/policy*; do\n  echo ondemand > ${cpu}/scaling_governor\ndone\n\n# Reduce the boost threshold to 80%\necho 80 > /sys/devices/system/cpu/cpufreq/ondemand/up_threshold' > /etc/local.d/cpufreq.start

        - name: make it executable
          ansible.builtin.raw: chmod 0700 /etc/local.d/cpufreq.start

        - name: add to boot
          ansible.builtin.raw: rc-update add local default


    - name: disable wireless power_save
      block:
        - name: set wireless power_save to off
          ansible.builtin.raw: iw wlan0 set power_save off

        - name: add wlan power_save rule
          ansible.builtin.raw: echo 'ACTION=="add", SUBSYSTEM=="net", KERNEL=="wlan*", RUN+="/usr/sbin/iw $name set power_save off"' > /etc/udev/rules.d/powersave.rules

        - name: add to lbu
          ansible.builtin.raw: lbu add /etc/udev/rules.d/powersave.rules


    - name: disable IPv6
      block:
        - name: check disable_ipv6 presence
          ansible.builtin.raw: grep "net.ipv6.conf.all.disable_ipv6" /etc/sysctl.conf | cat
          register: IPV6_STATUS

        - name: update disable_ipv6 config
          ansible.builtin.raw: sed -i -e 's/^net.ipv6.conf.all.disable_ipv6.*/net.ipv6.conf.all.disable_ipv6 = 1/g' /etc/sysctl.conf; sysctl -p
          when: IPV6_STATUS.stdout.splitlines()|length == 1

        - name: set disable_ipv6 config
          ansible.builtin.raw: echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf; sysctl -p
          when: IPV6_STATUS.stdout.splitlines()|length == 0


    - name: lbu media stuff
      block:
        - name: enable community repository
          ansible.builtin.raw: sed -i -e "/alpine\/v\(.*\)community/ s/# *//" /etc/apk/repositories;

        - name: get $LBU_MEDIA location
          ansible.builtin.raw: . /etc/lbu/lbu.conf; echo $LBU_MEDIA
          register: LBU_MEDIA

        - name: get current CPU arch
          ansible.builtin.raw: cat /etc/apk/arch
          register: ARCH

        - meta: end_host
          when: LBU_MEDIA.stdout.splitlines()|length != 1

        - meta: end_host
          when: ARCH.stdout.splitlines()|length != 1

        - name: set lbu_media fact
          set_fact:
              lbu_media: "{{ LBU_MEDIA.stdout.splitlines()[0] }}"

        - name: set arch fact
          set_fact:
              arch: "{{ ARCH.stdout.splitlines()[0] }}"

        - name: remount,rw for /media/{{ lbu_media }}
          ansible.builtin.raw: mount -oremount,rw /media/{{ lbu_media }}

        - name: setup usercfg.txt
          block:
            - name: usercfg.txt - limit CPU frequency
              ansible.builtin.raw: echo "arm_freq=800" > /media/{{ lbu_media }}/usercfg.txt

            - name: usercfg.txt - enable camera
              ansible.builtin.raw: echo -e "dtoverlay=vc4-fkms-v3d\ncamera_auto_detect=1" >> /media/{{ lbu_media }}/usercfg.txt

        - name: fetch go2rtc
          block:
            - name: stop go2rtc
              ansible.builtin.raw: service go2rtc stop | cat

            - name: get go2rtc version
              ansible.builtin.raw: wget -q "https://api.github.com/repos/AlexxIT/go2rtc/releases/latest" -O- | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | awk '{print(substr($1,2))}'
              register: go2rtc_version

            - name: "download go2rtc v{{ go2rtc_version.stdout.splitlines()[0] }}"
              ansible.builtin.raw: wget https://github.com/AlexxIT/go2rtc/releases/download/v{{ go2rtc_version.stdout.splitlines()[0] }}/go2rtc_linux_armv6 -O /media/{{ lbu_media }}/go2rtc


        - name: local apk repository
          block:
            - name: create local repo directory
              ansible.builtin.raw: |
                rm -rf /media/{{ lbu_media }}/local-apks-repo/;
                mkdir -p /media/{{ lbu_media }}/local-apks-repo/{{ arch }};

            - name: remove local-apks-repo if present in /etc/apk/repositories
              ansible.builtin.raw: sed -i -e '/local-apks-repo/d' /etc/apk/repositories

            - name: add local-apks-repo /etc/apk/repositories
              ansible.builtin.raw: echo "/media/{{ lbu_media }}/local-apks-repo" >> /etc/apk/repositories

            - name: remove previous versions
              ansible.builtin.raw: rm -f /media/{{ lbu_media }}/local-apks-repo/{{ arch }}/*.apk;

            - name: download rpicam-lib
              ansible.builtin.raw: wget https://github.com/nekoserv-repository/packages/raw/main/alpinelinux/rpicam-lib-0.2.0.20240418-r0.apk -P /media/{{ lbu_media }}/local-apks-repo/{{ arch }}/

            - name: download rpicam-apps
              ansible.builtin.raw: wget https://github.com/nekoserv-repository/packages/raw/main/alpinelinux/rpicam-apps-1.4.4-r0.apk -P /media/{{ lbu_media }}/local-apks-repo/{{ arch }}/

            - name: create APK index
              block:
                - name: generate APKINDEX.tar.gz
                  ansible.builtin.raw: |
                    apk index -o /tmp/APKINDEX.unsigned.tar.gz --allow-untrusted /media/{{ lbu_media }}/local-apks-repo/{{ arch }}/*.apk;
                    mv /tmp/APKINDEX.unsigned.tar.gz /media/{{ lbu_media }}/local-apks-repo/{{ arch }}/APKINDEX.tar.gz;

                - name: install abuild
                  ansible.builtin.raw: apk add --no-cache abuild

                - name: remove previous keys
                  ansible.builtin.raw: rm -f /etc/apk/keys/root-*.pub

                - name: generate new keys (this is SLOW!)
                  ansible.builtin.raw: |
                    rm -rf ~/.abuild/;
                    abuild-keygen -a -i -n 2>/dev/null | cat;

                - name: sign APKINDEX.tar.gz
                  ansible.builtin.raw: abuild-sign -k /root/.abuild/root-*.rsa /media/{{ lbu_media }}/local-apks-repo/{{ arch }}/APKINDEX.tar.gz

                - name: trust keys
                  ansible.builtin.raw: cp /root/.abuild/root-*.rsa.pub /etc/apk/keys/

                - name: remove abuild
                  ansible.builtin.raw: apk del --purge abuild

        - name: remount,ro for /media/{{ lbu_media }}
          ansible.builtin.raw: mount -oremount,ro /media/{{ lbu_media }}



    - name: setup v4l2
      block:
        - name: v4l2 module configuration
          ansible.builtin.raw: echo -e "bcm2835-v4l2\noptions bcm2835-v4l2 max_video_width=3240 max_video_height=2464" > /etc/modules-load.d/rpi-camera.conf

        - name: add v4l2 to lbu
          ansible.builtin.raw: lbu add /etc/modules-load.d/rpi-camera.conf


    - name: install camera software
      block:
        - name: apk update
          ansible.builtin.raw: apk update

#        - name: setup apk cache
#          ansible.builtin.raw: setup-apkcache /media/{{ lbu_media }}/cache

        - name: install rpicam-lib
          ansible.builtin.raw: apk add rpicam-lib

        - name: install rpicam-apps
          ansible.builtin.raw: apk add rpicam-apps


        - name: install some tools
          ansible.builtin.raw: apk add nano htop dosfstools

        - name: setup udev
          ansible.builtin.raw: setup-devd udev

    - name: setup camera script
      block:
        - name: init. camera script
          ansible.builtin.raw: |
            echo "#!/bin/sh" > /usr/local/bin/camera
            echo "pkill /usr/libexec/libcamera/raspberrypi_ipa_proxy" >> /usr/local/bin/camera
            echo "exec rpicam-vid --nopreview -t 0 --width 1280 --height 720 --framerate 20 --inline -o - 2>/dev/null" >> /usr/local/bin/camera

        - name: chmod camera script
          ansible.builtin.raw: chmod 0700 /usr/local/bin/camera

        - name: add to lbu
          ansible.builtin.raw: lbu add /usr/local/bin/camera


    - name: go2rtc initscript
      block:
        - name: create go2rtc.yaml
          ansible.builtin.raw: echo -e "streams:\n  cam\x3A    exec:/usr/local/bin/camera" > /etc/go2rtc.yaml

        - name: create go2rtc initscript
          ansible.builtin.raw: echo -e "#!/sbin/openrc-run\nname=\"go2rtc daemon\"\ncommand_background=\"yes\"\ndepend() {\n    need net\n}\nstart() {\n    /media/{{ lbu_media }}/go2rtc -config /etc/go2rtc.yaml 2>&1 > /dev/null &\n}\nstop() {\n    pkill -x /media/{{ lbu_media }}/go2rtc | cat\n}" > /etc/init.d/go2rtc

        - name: set chmod
          ansible.builtin.raw: chmod 0700 /etc/init.d/go2rtc

        - name: add to boot
          ansible.builtin.raw: rc-update add go2rtc default

        - name: add to lbu
          ansible.builtin.raw: lbu add /etc/init.d/go2rtc

        - name: save
          ansible.builtin.raw: lbu ci

        - name: sync
          ansible.builtin.raw: sync


    - name: reboot
      block:
        - name: reboot
          ansible.builtin.raw: reboot
          poll: 0
          ignore_errors: yes

        - name: wait for host to come up
          wait_for:
            host: "{{ inventory_hostname }}"
            port: 22
            state: started
            delay: 30
            timeout: 120
          delegate_to: localhost
