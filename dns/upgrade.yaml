---
- name: upgrade alpine host(s)
  hosts: dns
  gather_facts: no
  serial: 1

  tasks:
    - name: get VERSION_ID
      ansible.builtin.raw: . /etc/os-release; echo $VERSION_ID
      register: VERSION_ID

    - meta: end_play
      when: VERSION_ID.stdout.splitlines()|length != 1

    - name: get short version
      ansible.builtin.raw: echo "{{ VERSION_ID.stdout.splitlines()[0] }}" | sed -E 's/([0-9].[0-9][0-9]).*/\1/'
      register: SHORT_VERSION

    - name: update /etc/apk/repositories
      ansible.builtin.raw: sed -i -e 's/v{{ SHORT_VERSION.stdout.splitlines()[0] }}/v{{ NEW_VERSION }}/g' /etc/apk/repositories | cat

    - name: update index of available package(s)
      ansible.builtin.raw: apk update

    - name: check package(s) update(s)
      ansible.builtin.raw: apk version -l '<'
      register: pkgs_output

    - name: package(s) to be upgraded
      ansible.builtin.debug:
        msg: "{{ pkgs_output.stdout_lines }}"

    - name: upgrading {{ pkgs_output.stdout.splitlines()|length - 1 }} package(s)...
      ansible.builtin.raw: apk upgrade --available

    - name: run local backup utility (lbu)
      ansible.builtin.raw: mv /etc/unbound/adhosts.conf /tmp/adhosts.conf ; touch /etc/unbound/adhosts.conf ; lbu ci ; mv /tmp/adhosts.conf /etc/unbound/adhosts.conf
    - name: check if reboot needed
      ansible.builtin.raw: lsof / 2>&1 | awk '$3=="(deleted)"' | cat
      register: lsof_output

    - meta: end_play
      when: lsof_output.stdout.splitlines()|length == 0
      
    - name: reboot
      ansible.builtin.raw: reboot
      poll: 0
      ignore_errors: yes

    - name: wait for host to come up
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 30
        timeout: 120
      delegate_to: localhost

